#!/bin/bash
#==============================================================================
# Copyright 2016 Adrian Vovk
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#==============================================================================

# This tool allows you to download commands (be it .sh files or specially-made extentions to this file)
# Feel free to contribute your own commands at https://github.com/AdrianVovk/BashCommands. I will approve them myself.

#=========================================================================================================================

# If this is the first run or things have not been configured yet, configure them
mkdir ~/.commandstool &> /dev/null
mkdir ~/.commandstool/plugins &> /dev/null
if [ ! -f "$HOME/.commandstool/plugins_location" ]; then
        touch ~/.commandstool/plugins_location
fi
if [ ! -f "$HOME/.commandstool/script_location" ]; then
        echo "$HOME/.bash_aliases" > ~/.commandstool/script_location
fi
if [ ! -f "$HOME/.commandstool/installed_plugins" ]; then
        touch ~/.commandstool/installed_plugins
fi

# Read configuration
INSTALLED_SCRIPTS_LOCATION=~/.commandstool/plugins_location
COMMANDS_TOOL_FILE=$(cat ~/.commandstool/script_location)

# This goes through and loads in all of the new scripts
source $INSTALLED_SCRIPTS_LOCATION

#=====================================================================================================

# Nano shortcut
# Will remove appon request
alias e='nano'

# Bash
alias edit_bashrc='nano ~/.bashrc && update_bash'
alias update_bash='exec bash'

# The main functions
alias edit_commands='nano $INSTALLED_SCRIPTS_LOCATION && update_bash'
alias edit_commands_tool='nano $COMMANDS_TOOL_FILE && update_bash'

# Enable this when developing on a PC not on GitHub
#alias backup="cp $COMMANDS_TOOL_FILE ~/.ctf_backup"

install_plugin() {
        REPO="https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/commands/${1##*/}"
        if curl --output /dev/null --silent --head --fail "$REPO"; then
                read -n1 -p "$1 was found in the repo. Install it? [y/n]:" call_safetey && echo        
                URL=$REPO
                FILENAME=$1
        else 
                FILENAME=${1##*/}
                read -n1 -p "$FILENAME is from an external source. Install it? [y/n]:" call_safetey && echo
                URL=$1
        fi
        if [ "$call_safetey" = "y" ]; then
                wget -O ~/.commandstool/plugins/$FILENAME $URL &> /dev/null
                echo "echo \"Updating $FILENAME\"" >> ~/.commandstool/installed_plugins
                echo "rm $HOME/.commandstool/plugins/$FILENAME" >> ~/.commandstool/installed_plugins
                echo "wget -O ~/.commandstool/plugins/$FILENAME $URL &> /dev/null" >> ~/.commandstool/installed_plugins
                echo "chmod +rx ~/.commandstool/plugins/$FILENAME" >> ~/.commandstool/installed_plugins
                chmod +rx ~/.commandstool/plugins/$FILENAME
                echo "source $HOME/.commandstool/plugins/$FILENAME" >> $INSTALLED_SCRIPTS_LOCATION
                source $INSTALLED_SCRIPTS_LOCATION
                
                # Try to run the plugin's splash if it has one
                $FILENAME 2> /dev/null
        else
                echo Abort
        fi
}

try_plugin() {
        REPO="https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/commands/${1##*/}"
        if curl --output /dev/null --silent --head --fail "$REPO"
        then
                read -n1 -p "$1 was found in the repo. Try it? [y/n]:" call_safetey && echo        
                URL=$REPO
        else 
                FILENAME=${1##*/}
                read -n1 -p "$FILENAME is from an external source. Try it? [y/n]:" call_safetey && echo
                URL=$1
        fi
        if [ "$call_safetey" = "y" ]; then
                mkdir ~/.commandstool/tmp &> /dev/null
                wget -O ~/.commandstool/tmp/script_exec $URL &> /dev/null
                chmod +x ~/.commandstool/tmp/script_exec
                echo "There is a small chance the command failed to download. Please try to run the command to make sure it worked."
                echo "The command will be removed from your computer the next time you log into bash. All of the functions of this command should work."
                echo "Running script (putting buffer just in case the script outputs things when it is run and doesn't just add functions):"
                echo
                source ~/.commandstool/tmp/script_exec
                echo
                rm -rf ~/.commandstool/tmp
        else
                echo Abort
        fi
}

uninstall_plugin() {
        if [ -f ~/.commandstool/plugins/$1 ]; then
                FILENAME=$1
        else 
                FILENAME=${1##*/}
                if [ ! -f ~.commandstool/plugins/$FILENAME ]; then
                        echo "Plugin not found. Abort"
                        return
                fi
        fi
        read -n1 -p "Are you sure you want to uninstall $FILENAME? [y/n]:" call_safetey && echo
        if [ "$call_safetey" = "y" ]; then
                rm ~/.commandstool/plugins/$FILENAME
                sed -n '/'$FILENAME'/!p' ~/.commandstool/installed_plugins >> ~/.commandstool/tmp_installed_p && mv ~/.commandstool/tmp_installed_p ~/.commandstool/installed_plugins
                sed -n '/'$FILENAME'/!p' $INSTALLED_SCRIPTS_LOCATION >> ~/.commandstool/tmp_installed_s && mv ~/.commandstool/tmp_installed_s $INSTALLED_SCRIPTS_LOCATION
        else
                echo Abort
        fi
}

make_command() {
        echo "alias $1='$2'" >> $INSTALLED_SCRIPTS_LOCATION
        update_bash
}

update_plugins() {
        if [ ! "$1" = "--no_ct_update" ]; then
                update_commands_tool
        fi
        source ~/.commandstool/installed_plugins
        update_bash
}

# Configuration

update_commands_tool() {
        mkdir ~/.commandstool/tmp/ &> /dev/null
        wget -O ~/.commandstool/tmp/patch https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/ct_update_patch &> /dev/null
        update_commands_tool_custom_patch ~/.commandstool/tmp/patch
        rm -rf ~/.commandstool/tmp/ &> /dev/null
        update_bash
}

update_commands_tool_custom_patch() {
        # Replace the file
        echo "Downloading new version"
        rm $COMMANDS_TOOL_FILE >> ~/.commandstool/installed_plugins &> /dev/null
        wget -O $COMMANDS_TOOL_FILE https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/commandstool &> /dev/null
        
        #Code for patches
        source $1
        
        # Manually notify bash
}

commands_tool_uninstall() {
        read -n1 -p "Are you sure you want to do this? [y/n]:" call_safetey && echo
        if [ "$call_safetey" = "y" ]; then
                rm $COMMANDS_TOOL_FILE
                rm -rf ~/.commandstool
                update_bash
        else
                echo Abort
        fi
}

commands_tool_reset() {
        rm -rf ~/.commandstool
        if [ ! -z "$1" ]; then
                echo $1 > ~/.commandstool/script_location
        fi
        update_bash
}

commands_tool_test() {
        echo "Commands Tool was successfully installed."
}
