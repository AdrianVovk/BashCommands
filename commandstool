#!/bin/bash
#==============================================================================
# Copyright 2016 Adrian Vovk
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#==============================================================================

# This tool allows you to download commands (be it .sh files or specially-made extentions to this file)
# Feel free to contribute your own commands at https://github.com/AdrianVovk/BashCommands. I will approve them myself.

#=========================================================================================================================

# Read configuration
INSTALLED_SCRIPTS_LOCATION=~/.commandstool/runner
COMMANDS_TOOL_FILE=$(cat ~/.commandstool/config/script_location)
UPDATE_SCRIPT=~/.commandstool/update_script
PLUGINS_DATA_STORE=~/.commandstool/plugins_storage

CT_COMMAND=$1
if [ -z CT_COMMAND ]; then
        echo "Usage: 'commandstool command [options]'"
        return
fi
shift
case $CT_COMMAND in
        'try')
                ;;
        'install')
                ;;
        'uninstall')
                if [ -f ~/.commandstool/plugins/$1 ]; then
                        FILENAME=$1
                else 
                        FILENAME=${1##*/}
                        if [ ! -f ~/.commandstool/plugins/$FILENAME ]; then
                                echo "Plugin not found. Abort"
                                return
                        fi
                fi
                read -n1 -p "Are you sure you want to uninstall $FILENAME? [y/n]:" permission && echo
                if [ "$permission" = "y" ]; then
                        rm ~/.commandstool/plugins/$FILENAME
                        sed -n '/'$FILENAME'/!p' $UPDATE_SCRIPT >> ~/.commandstool/tmp_update_script && mv ~/.commandstool/tmp_update_script $UPDATE_SCRIPT
                        sed -n '/'$FILENAME'/!p' $INSTALLED_SCRIPTS_LOCATION >> ~/.commandstool/tmp_installed_s && mv ~/.commandstool/tmp_installed_s $INSTALLED_SCRIPTS_LOCATION
                else
                        echo Abort
                fi
                ;;
        'update')
                source $UPDATE_SCRIPT
                if [ ! "$1" = "-c" ]; then
                        echo "Updating Commands Tool"
                        commandstool update_ct
                fi
                update_bash
                ;;
        'update_ct')
                mkdir ~/.commandstool/tmp/ &> /dev/null
                wget -O ~/.commandstool/tmp/patch https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/ct_update_patch &> /dev/null
                update_commands_tool_custom_patch ~/.commandstool/tmp/patch
                rm -rf ~/.commandstool/tmp/ &> /dev/null
                update_bash
                ;;
        'patch_ct')
                # Replace the file
                rm $COMMANDS_TOOL_FILE &> /dev/null
                wget -O $COMMANDS_TOOL_FILE https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/commandstool &> /dev/null
                chmod +rx $COMMANDS_TOOL_FILE
                
                source $1 #Code for patches
                
                # Manually notify bash
                ;;
        'reset')
                read -n1 -p "Are you sure you want to do this? [y/n]:" permission && echo
                if [ "$permission" = "y" ]; then
                        mv $COMMANDS_TOOL_FILE ~/.ct_baskup # Just in case commandstool was installed inside of ~/.commandstool (Which might even be the default eventually)
                        rm -rf ~/.commandstool # Delete the install folder.
                        mv ~/.ct_backup $COMMANDS_TOOL_FILE # Move the backup back
                        source $COMMANDS_TOOL_FILE init_ct
                        echo "$COMMANDS_TOOL_FILE" > ~/.commandstool/config/script_location # After creating the proper direcories again, save the install location back into the config.
                        update_bash
                else
                        echo Abort
                fi
                ;;
        'uninstall_ct')
                read -n1 -p "Are you sure you want to do this? [y/n]:" permission && echo
                if [ "$permission" = "y" ]; then
                        sed -n '/'$COMMANDS_TOOL_FILE'/!p' ~/.bashrc >> ~/.commandstool/tmp_bashrc && mv ~/.commandstool/tmp_bashrc $UPDATE_SCRIPT
                        rm $COMMANDS_TOOL_FILE
                        if [ ! "$1" = "-k" ]; then
                                rm -rf ~/.commandstool
                        fi
                        update_bash
                else
                        echo Abort
                fi
                ;;
        'test_install')
                echo "Commands Tool was successfully installed."
                ;;
        'help')
                commandstool about
                echo
                commandstool commands
                echo
                ;;
        'about')
                echo "======================================================================"
                echo "CommandsTool"
                echo "Created by Adrian Vovk"
                echo "======================================================================"
                echo
                echo "CommandsTool: A script that can be used to install other scripts onto your system."
                echo "Definitions:"
                echo "- Command: A script that CommandsTool allows you to execute as a command (example: 'memtest test -a')"
                echo "- CommandPack: A plugin designed for CommandsTool that will add a set of commands into your environment"
                echo "Version: 1.0"
                ;;
        'commands')
                echo "List of possible commands:"
                echo "- try: Allows you to try out commands without installing them"
                echo "        Usage: 'commandstool try PLUGIN [-n name] [-p]'"
                echo "        -n: Use the provided name instead of the automatically generated one. You will use this to call the command (if it is not a CommandPack. If it is, this does nothing)"
                echo "        -p: Treat this plugin as a CommandPack"
                echo "- install: Installs the provided script or CommandPack"
                echo "        Usage: 'commandstool install PLUGIN [-n name] [-p]'"
                echo "        -n: Use the provided name instead of the automatically generated one. You will use this to call the command and reference it within commandstool"
                echo "        -p: Treat this plugin as a CommandPack"
                echo "- uninstall: Uninstalls the provided command or CommandPack"
                echo "        Usage: 'commandstool uninstall PLUGIN'"
                echo "- update: Update all of the installed commands and CommandPacks"
                echo "        Usage: 'commandstool update [-c]"
                echo "        -c: Do not update CommandsTool while updating all of the plugins"
                echo "- update_ct: Allowing you to update CommandsTool without touching installed scripts"
                echo "- uninstall_ct: Uninstall CommandsTool from your system. If you installed using the installer script that will be kept."
                echo "        -k: Keep installed plugins and data."
                echo "- reset: Resets CommandsTool removing all installed scripts"
                echo "- help: Gives you all of the possible commands along with what CommandsTool can do."
                echo "- about: Explains what CommandsTool can do"
                echo "- commands: Show the list of commands that can be used"
                echo
                echo "List of preinstalled Commands:"
                echo "- e: Shorthand for 'nano'"
                echo "- ct: Shorthand for 'commandstool'"
                ;;
        init_ct)
                # If things have not been configured yet, configure them
                mkdir ~/.commandstool &> /dev/null
                mkdir ~/.commandstool/plugins &> /dev/null
                mkdir ~/.commandstool/plugins_storage &> /dev/null
                mkdir ~/.commandstool/config &> /dev/null
                rm -rf ~/.commandstool/tmp # Delete the temp folder. This will delete any commands downloaded to try
                if [ ! -f "$HOME/.commandstool/runner" ]; then
                        touch ~/.commandstool/runner
                fi
                if [ ! -f "$HOME/.commandstool/config/script_location" ]; then
                        echo "$HOME/.bash_aliases" > ~/.commandstool/config/script_location
                fi
                if [ ! -f "$HOME/.commandstool/update_script" ]; then
                        touch ~/.commandstool/update_script
                fi
                
                # Print a header message if this is the first run
                if [ ! -f ~/.commandstool/config/didrun ]; then
                        echo "Yes" > ~/.commandstool/config/didrun
                        echo "======================================================================"
                        echo "COMMANDS TOOL"
                        echo "Created by Adrian Vovk"
                        echo "======================================================================"
                        echo ""
                fi
                
                # This goes through and loads in all of the scripts properly
                source ~/.commandstool/runner
                
                # Used to call commandstool
                alias commandstool='source $(cat ~/.commandstool/config/script_location)'
                alias ct="commandstool"
                
                # Nano shortcut
                # Will remove appon request
                alias e='nano'
                
                # Bash
                alias edit_bashrc='nano ~/.bashrc && update_bash'
                alias update_bash='exec bash'
                
                # Allowing you to edit some of the things.
                alias edit_commands='nano $INSTALLED_SCRIPTS_LOCATION && update_bash'
                alias edit_update_script='nano $UPDATE_SCRIPT && update_bash'
                alias edit_commands_tool='nano $COMMANDS_TOOL_FILE && update_bash'
                
                # Enable this when developing on a PC
                #alias backup="cp $COMMANDS_TOOL_FILE ~/.ctf_backup"
                ;;
        *)
                echo "Invalid command"
                echo
                commandstool commands
                ;;
esac

install_plugin() {
        PACK_REPO="https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/packs/${1##*/}"
        COMMAND_REPO="https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/commands/${1##*/}"
        if curl --output /dev/null --silent --head --fail "$PACK_REPO"; then
                read -n1 -p "$1 is a CommandPack and was found in the repo. Install it? [y/n]:" permission && echo
                URL=$PACK_REPO
                FILENAME=$1
                TYPE="pack"
        else if curl --output /dev/null --silent --head --fail "$COMMAND_REPO"; then
                read -n1 -p "$1 is a command and was found in the repo. Install it? [y/n]:" permission && echo
                URL=$COMMAND_REPO
                FILENAME=$1
                TYPE="command"
        else if curl --output /dev/null --silent --head --fail "$1"; then
                FILENAME=${1##*/}
                read -n1 -p "$FILENAME may damage your computer. Make sure you know what this script does. Install it? [y/n]:" permission && echo
                URL=$1
                TYPE="command"
        else
                echo "No such URL or command exists."
                echo "Abort"
                return
        fi
        if [ "$permission" = "y" ]; then
                # If the user overrided anything, use it
                
                
                if [ "$TYPE" = "pack" ]; then
                        echo "source $HOME/.commandstool/plugins/$FILENAME" >> $INSTALLED_SCRIPTS_LOCATION # It is a CommandPack
                else
                        echo "alias $FILENAME='source $HOME/.commandstool/plugins/$FILENAME'" >> $INSTALLED_SCRIPTS_LOCATION # It is a command
                fi
                wget -O ~/.commandstool/plugins/$FILENAME $URL &> /dev/null
                echo "echo \"Updating $FILENAME\"" >> $UPDATE_SCRIPT
                echo "rm $HOME/.commandstool/plugins/$FILENAME" >> $UPDATE_SCRIPT
                echo "wget -O ~/.commandstool/plugins/$FILENAME $URL &> /dev/null" >> $UPDATE_SCRIPT
                echo "chmod +rx ~/.commandstool/plugins/$FILENAME" >> $UPDATE_SCRIPT
                chmod +rx ~/.commandstool/plugins/$FILENAME
                source $INSTALLED_SCRIPTS_LOCATION
                
                # Try to run the plugin's splash if it has one
                $FILENAME 2> /dev/null
        else
                echo Abort
        fi
}

try_plugin() {
        PACK_REPO="https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/packs/${1##*/}"
        COMMAND_REPO="https://raw.githubusercontent.com/AdrianVovk/BashCommands/master/commands/${1##*/}"
        if curl --output /dev/null --silent --head --fail "$PACK_REPO"; then
                read -n1 -p "$1 is a CommandPack and was found in the repo. Install it? [y/n]:" permission && echo
                URL=$PACK_REPO
                FILENAME=$1
                TYPE="pack"
        else if curl --output /dev/null --silent --head --fail "$COMMAND_REPO"; then
                read -n1 -p "$1 is a command and was found in the repo. Install it? [y/n]:" permission && echo
                URL=$COMMAND_REPO
                FILENAME=$1
                TYPE="command"
        else if curl --output /dev/null --silent --head --fail "$1"; then
                FILENAME=${1##*/}
                read -n1 -p "$FILENAME may damage your computer. Make sure you know what this script does. Install it? [y/n]:" permission && echo
                URL=$1
                TYPE="command"
        else
                echo "No such URL or command exists."
                echo "Abort"
                return
        fi
        if [ "$permission" = "y" ]; then
                # If the user overrided anything, use it
                
                
                mkdir ~/.commandstool/tmp &> /dev/null
                wget -O ~/.commandstool/tmp/$FILENAME $URL &> /dev/null
                chmod +x ~/.commandstool/tmp/$FILENAME
                echo "There is a small chance the command failed to download. Please try to run the command to make sure it worked."
                echo "The command will be removed from your computer the next time you log into bash. All of the functions of this command should work."
                
                # Execute the script as needed
                if [ "$TYPE" = "pack" ]; then
                        echo
                        source ~/.commandstool/tmp/$FILENAME
                        rm -rf ~/.commandstool/tmp/ # Delete the file now because we can.
                        echo
                else
                        alias $FILENAME="source ~/.commandstool/tmp/$FILENAME"
                        # Cleanup is done by init so we don't delete any files now.
                fi
                
        else
                echo Abort
        fi
}

make_command() {
        echo "alias $1='$2'" >> $INSTALLED_SCRIPTS_LOCATION
        update_bash
}
